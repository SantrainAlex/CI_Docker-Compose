#!/bin/bash

echo "üîç V√©rification de l'√©tat de l'application"
echo "========================================="

# Couleurs pour le formatage
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'
YELLOW='\033[1;33m'

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úì $2${NC}"
    else
        echo -e "${RED}‚úó $2${NC}"
        echo -e "${YELLOW}  ‚Üí $3${NC}"
    fi
}

echo -e "\n1Ô∏è‚É£  V√©rification des conteneurs"
echo "-----------------------------"

# V√©rifier si tous les conteneurs sont en cours d'ex√©cution
docker compose ps --format json | grep -q "catalogue-db.*running"
print_result $? "Base de donn√©es en cours d'ex√©cution" "La base de donn√©es n'est pas en cours d'ex√©cution"

docker compose ps --format json | grep -q "catalogue-server.*running"
print_result $? "Serveur en cours d'ex√©cution" "Le serveur n'est pas en cours d'ex√©cution"

docker compose ps --format json | grep -q "catalogue-client.*running"
print_result $? "Client en cours d'ex√©cution" "Le client n'est pas en cours d'ex√©cution"

echo -e "\n2Ô∏è‚É£  V√©rification de la base de donn√©es"
echo "--------------------------------"

# V√©rifier la connexion √† MySQL
docker compose exec -T db mysqladmin -u cataloguser -puserpass -h localhost ping &>/dev/null
print_result $? "Connexion MySQL r√©ussie" "Impossible de se connecter √† MySQL"

# V√©rifier la base catalogue_db
docker compose exec -T db mysql -u cataloguser -puserpass -e "USE catalogue_db; SELECT COUNT(*) FROM items;" &>/dev/null
print_result $? "Base de donn√©es catalogue_db accessible" "La base catalogue_db n'est pas accessible"

echo -e "\n3Ô∏è‚É£  V√©rification du serveur"
echo "-------------------------"

# V√©rifier l'API
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/api/items)
if [ "$response" = "200" ]; then
    print_result 0 "API /api/items accessible" ""
else
    print_result 1 "API /api/items accessible" "Code de r√©ponse: $response"
fi

# Test d'ajout d'un item
test_item='{"title":"Test Health Check","description":"Test automatique","category":"Test"}'
add_response=$(curl -s -X POST -H "Content-Type: application/json" -d "$test_item" http://localhost:5000/api/items)
if echo "$add_response" | grep -q "succ√®s"; then
    print_result 0 "Ajout d'item via API r√©ussi" ""
else
    print_result 1 "Ajout d'item via API r√©ussi" "R√©ponse: $add_response"
fi

echo -e "\n4Ô∏è‚É£  V√©rification du client"
echo "-------------------------"

# V√©rifier si le client web est accessible
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
if [ "$response" = "200" ]; then
    print_result 0 "Interface web accessible" ""
else
    print_result 1 "Interface web accessible" "Code de r√©ponse: $response"
fi

echo -e "\nüìä Logs r√©cents"
echo "-------------"
echo -e "${YELLOW}Logs de la base de donn√©es :${NC}"
docker compose logs --tail 5 db
echo -e "\n${YELLOW}Logs du serveur :${NC}"
docker compose logs --tail 5 server
echo -e "\n${YELLOW}Logs du client :${NC}"
docker compose logs --tail 5 client
